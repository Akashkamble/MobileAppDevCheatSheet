Kotlin 
========================================================
classes & methods are by default 
"public final " in nature 

Array 
========================================================
val arr = Array(3) { "" }  // is equivalent for: arrayOf("","","")
or 
val arr = Array<String?>(5){null}
or
var arr = emptyArray<String>()

Visibility Modifier
========================================================
private       : same as java 
protected     : same as java 
internal      : same as java default // accessible in the same module
public        : same as java 

Loops 
========================================================
if (x in 1..y+1)
if (-1 !in 0..list.lastIndex)

for (item in items)
for (index in items.indices)
for (x in 1..5)
for (x in 1..10 step 2)
for (x in 9 downTo 0 step 3)
for (i in 1 until 10) // 10 is excluded 

while (index < items.size)

when (obj) {
  1          -> "One"
  "Hello"    -> "Greeting"
  is Long    -> "Long"
  !is String -> "Not a string"
  else       -> "Unknown"
}

Constructors 
========================================================
class Customer(name: String, val type: String)

name    => just parameters and cant be used outside the method scope.
type    => is a declared variable and can be used anywhere in the class scope.

class Customer (1)constructor(name: String){
  
        constructor(type: Int): (2) this("leo"){}
        constructor(type: HashMap): (2) this("leo"){}
    (3) constructor(type: ArrayList): (2) this("leo"){}
    
    init{}
}

(1) => not compulsory 
(2) => needs be to call if primary constructor exists
(3) => can have multiple constructor 

Interface 
========================================================
all methods and properties are public open, but not final 

interface One{
  fun click()
}

interface Two{
  fun click()
}

class Implementation : One, Two{

  // compulsory to overide coz of ambiguity
  click(){
    super<One>.click()
    super<Two>.click()
  }
}

== operators 
========================================================
for normal class c1, c2

c1 == c2 // checks reference 

for data class d1, d2 

d1 == d2 // compares the values within the class 


Variances concept 
========================================================
BabyChild extends Parent extends GrandParent

Covariance
input		    :	  TaxPayer<Parent>
acceptable 	: 	Parent, BabyChild

Contravariance
input		    :	  Adult<Parent>
acceptable	:  	GrandParent, Parent 

Invariance 
input		    :	  Customer<Parent>
acceptable	: 	Parent

Bivariance 
input		    :	  Parent<Parent>
acceptable	: 	GrandParent, Parent, BabyChild


Object of Anonymous class 
========================================================
setClickListener( object: ClickListener {


})

val adhoc = object {
  var x: Int = 0
  var y: Int = 0
}

print(adhoc.x + adhoc.y)

High Order Functions 
========================================================
functions accepting lambda functions as parameters

fun display(condition: ()-> Boolean, val value: Int){
  if(condition()) {
    println("Hello")
  }
}

// usage 
display({ true }, 0)

Closures 
========================================================
values that can be changed from the lambda functions 

Predicates 
========================================================
Types               listOf(2,3,4,5,6,23,90)
all   :Boolean      all{ it > 1 }   // Are all numbers greater than 1
any   :Boolean      any{ it > 1 }   // Any number greater than 1
count :Int                          // Returns number of elements greater than 1    
find  :Boolean                      // Checks if the number exists 

Example:
listOf(2,3,4,5,6,23,90).all{ }.any{ } 

Type check 
========================================================
if (obj is String)

Collections - Mutable vs Immutable 
========================================================
immutableList
listOf("one", "two", "one")
setOf("one", "two", "one")

vs 
mutableListOf<String>()

val fruits = listOf("banana", "avocado", "apple", "kiwifruit")
fruits
  .filter { it.startsWith("a") }
  .sortedBy { it }
  .map { it.toUpperCase() }
  .forEach { println(it) }

Any vs *
========================================================
List<*>  vs List<Any>

List<String>  => will accept only string 
List<Any>     => will accept anything Integer, String, etc

Singleton 
========================================================
Way 1 : 

object Printer{
  val id: Int = 1
  fun display()
}

// calling
Printer.display()
Printer.id 

Way 2 :

class Printer {
  companion object{
    fun display()
  }
  
  object FakeCompanion{
    fun displayTest()
  }
}

// Difference is in calling from Java
Printer.Companion.display()
Printer.FakeCompanion.Instance.displayTest()


// Singleton & Inheritance 
open class Client(){
  fun display()
}

object Browser: Client()

// usage 
Browser.display()

Inner class
========================================================
class A{
  inner class Inner{
  
  }
}

Null Safety
========================================================
safe call           ?.
elvis call          ?:
non-null assertions !!

Delegation 
========================================================
can be achived using "by" clause 

var p: String by Delegate()

Delegation using By-clause
========================================================
interface Base{
  fun print()
}

class BaseImplementation(val x:Int) : Base{
  @overide 
  fun print() = print("hello")
}

class Derived(b: Base) : Base by b 

// Usage 
fun main(){
  val bi = BaseImpl(10)
  Derived(bi).print()
}

Custom Delegate Properties
========================================================
class Delegate() {
    operator fun getValue(thisRef: Any?, prop: KProperty<*>): String {
        return "$thisRef, thank you for delegating '${prop.name}' to me!"
    }

    operator fun setValue(thisRef: Any?, prop: KProperty<*>, value: String) {
        println("$value has been assigned to ${prop.name} in $thisRef")
    }
}

Delegation Properties
========================================================
by lazy()
val lazyValue: String by lazy {
    println("computed!")
    "Hello"
}

Modifier 
========================================================
For non-null variable which to be initialized at later stage 

lateinit - can only be used on var 
The modifier can only be used on var properties declared inside the body of a class (not in the primary constructor)

Lateinit vs Lazy 
========================================================
lazy can only be used on val, is used to save memory
lateinit can only be used on var, must be initialized before use.

Scope Functions Kotlin: 
========================================================
                (returns)
let 	= it 	  : lambda result 
also 	= it 	  : context object 
with 	= this 	: lambda result 
apply = this  : context object
run 	= this 	: lambda result 

shorthand = lal-war

Extension Functions 
========================================================

Odd Scenario 
class Example {
    fun printFunctionType() { println("Class method") }
}

fun Example.printFunctionType() { println("Extension function") }
fun Example.printFunctionType(i: Int) { println("Extension function") }

Example().printFunctionType()   // output : Class method 
Example().printFunctionType(1)  // output : Extension function

Inner Class 
========================================================

// Java
// holding reference of outer class 
class A {
    class B {
    ...
    }
}

// Kotlin 
// holding reference of outer class 
class A {
    inner class B {
    ...
    }
}

vs 

Inner static class 
--------------------------------------------------------
// Java 
class A {
    static class B {
    ...
    }
}

// Kotlin 
class A {
    class B {
    ...
    }
}

