* Service extends ContextWrapper
* Activity extends ContextThemeWrapper 
* Application extends ContextWrapper


// Set Max Length
editText.setFilters(new InputFilter[]{new InputFilter.LengthFilter(control.maxLength), new InputFilter.AllCaps()});

Security 
========================================================
APK Tampering
Token Based -> IP address of the device 

StaticLayout 
========================================================
used to draw text on canvas with autowrapping facility, 
because canvas.drawText doesn't considers the bounds and so the text is off the screen. 

Live Wallpaper 
========================================================
LiveWallaper (Create)
class YourLiveWallpaper extends WallpaperService{
  constructor{
    timerTask{
      draw()
    }
  }

  void draw(){
    Canvas canvas = getSurfaceView().canvas
    staticLayout.draw(canvas)
  }
}

Fitting for phones & tabs 
========================================================
phones dp           = 1 dp 
7   inch tablet     = 1.5 dp
10  inch tablet     = 2 dp 

Service vs Intent Service 
========================================================
Service         : runs on main thread, so any task needs to be executed in the background.
Intent Service  : runs on background thread and process one intent at a time. 

Build Process
========================================================
build type { uat, debug, release }
productflavours + dimension { client1, client2 }

View Stub 
========================================================
A ViewStub is an invisible, zero-sized View that can be used to lazily inflate layout resources at runtime

ViewStub stub = new ViewStub(this);
stub.setLayoutResource(R.layout.mySubTree);
View replacedView = stub.inflate(); 

GSON 
========================================================
class pojo{
  @SerializedName("ID")
  val id: Int
}

// Direct Object 
People peoplea    = gson.fromJson(jsonArray.toString(), People.class)

// Direct List 
Type listType     = new TypeToken<List<Post>>(){}.getType();
List<Post> posts  = gson.fromJson(jsonOutput, listType)

Multiple Recylerview Layouts (getItemViewType, onCreateViewHolder, onBindViewHolder)
ItemTouchListener, ItemAnimator 
========================================================
public int getItemViewType(int position) {
   return position % 2 * 2;
}

public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType){
  switch (viewType) {
    case 0: return new ViewHolder0(...)
    case 1: return new ViewHolder0(...)
  }
}

public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
  switch (holder.getItemViewType()) {
    case 0: 
      ViewHolder0 viewHolder0 = (ViewHolder0)holder;
      ....
      break
      
    case 1: 
      ViewHolder1 viewHolder1 = (ViewHolder1)holder;
      ....
      break
  }
}

// Click listerner 
// coupled in onBindViewHolder
view.setOnClickListener(mOnClickListener)

// less coupled 
recyclerView.addOnItemTouchListener()

Room - JetPack
========================================================
Types
Entity    : Represents a table within the database
Dao       : DAOs are responsible for defining the methods that access the database
Database  : Contains the database holder and serves as the main access point

@Entity( tableName = "", foreignKeys = "", indices = "" ) - every model class for Room 
class Employee{
  @PrimaryKey(autoGenerate = true)
  int empId
  
  @ColumnInfo(name = “column_name”)
  String name;
  
  @Ignore — field will not be persisted by Room
  String type;
  
  @Embeded — nested fields can be referenced directly in the SQL queries.
}

DAO 
interface EmployeeDao{
  @Query("SELECT * FROM EMPLOYEE LIMIT :limit")
  fun(limit: Int) : List<Employee>
  
  @Insert(onConflict = OnConflictStrategy.IGNORE)
  fun(user: User) : Long
  
  @Update 
  @Delete   
  
  @Transaction
  fun upsert(user: User) {
        long id = insert(obj);
        if (id == -1) {
            update(obj);
        }
  }
}

Database 
@Database(entities = {User.class}, version = 1)
public abstract class CompanyDatabase extends RoomDatabase{
  public EmployeeDao getInstance(Context context){
    return Room.databaseBuilder(applicationContext, CompanyDatabase.class)
           .fallbackDestructiveMigrations()
                      OR
           .addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_1_4)
           .build();
  }
  
  
  public abstract EmployeeDao employeeDao()
}

new Migration(1, 2) {
    @Override
    public void migrate(SupportSQLiteDatabase database) {
        // Since we didn't alter the table, 
        // there's nothing else to do here.
    }
};

Join or Complex Entity 
--------------------------------------------------------
@Entity
public class User {
    @PrimaryKey public long userId;
    public String name;
}

@Entity
public class Library {
    @PrimaryKey public long libraryId;
    public long userOwnerId;
}

Make pojo for simple nested query 

public class UserAndLibrary {
    @Embedded public User user;
    
    @Relation(
         parentColumn = "userId",
         entityColumn = "userOwnerId"
    )
    
    // For single one to one 
    public Library library;
    
    OR 
    
    // For one to many 
    public List<Playlist> playlists;

}

DAO Queries 
@Query("SELECT * FROM User")

public List<UserWithPlaylists> getUsersWithPlaylists();
or 
public UserAndLibrary getUsersWithLibrary();
  
TypeConverters  // converting custom data type like LONG => DATE and vice versa
--------------------------------------------------------
To use a custom data type whose value you would like to store in a single database column

public class Converters {
    @TypeConverter
    public static Date fromTimestamp(Long value) {
        return value == null ? null : new Date(value);
    }

    @TypeConverter
    public static Long dateToTimestamp(Date date) {
        return date == null ? null : date.getTime();
    }
}

// Just declare in the room database 
@TypeConverters({Converters.class})
public abstract class AppDatabase extends RoomDatabase {}

ROOM & RETROFIT 
--------------------------------------------------------
Same POJO works for both 

@Entity
public class User {
  @PrimaryKey(autoGenerate = true)
  @SerializedName("userID")
  int userID;
  
  @ColumnInfo(name = "userName")
  @SerializedName("nameUser")
  String name;
}  

ROOM can use the same pojo as well as retrofit using GSON works fine also when used individually. 
  
SignalR Android
========================================================
= new HubConnection("YOUR CONNECTION NAME")
mHubConnection.createHubProxy(SERVER_HUB_CHAT)
mHubConnection.start(clientTransport)

// Receiver methods at client side 
mHubProxy.on("clientBroadcast_android", new SubscriptionHandler1<CustomMessage>{

});

// Calling methods on server 
mHubProxy.invoke("hello_server_method", message);




