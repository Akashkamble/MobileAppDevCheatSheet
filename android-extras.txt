Security 
APK Tampering
Token Based -> IP address of the device 

StaticLayout 
used to draw text on canvas with autowrapping facility, 
because canvas.drawText doesn't considers the bounds and so the text is off the screen. 

LiveWallaper (Create)
class YourLiveWallpaper extends WallpaperService{
  constructor{
    timerTask{
      draw()
    }
  }

  void draw(){
    Canvas canvas = getSurfaceView().canvas
    staticLayout.draw(canvas)
  }
}

Room - JetPack
========================================================
Types
Entity    : Represents a table within the database
Dao       : DAOs are responsible for defining the methods that access the database
Database  : Contains the database holder and serves as the main access point

@Entity( tableName = "", foreignKeys = "", indices = "" ) - every model class for Room 
class Employee{
  @PrimaryKey(autoGenerate = true)
  int empId
  
  @ColumnInfo(name = “column_name”)
  String name;
  
  @Ignore — field will not be persisted by Room
  String type;
  
  @Embeded — nested fields can be referenced directly in the SQL queries.
}

DAO 
interface EmployeeDao{
  @Query("SELECT * FROM EMPLOYEE LIMIT :limit")
  fun(limit: Int) : List<Employee>
  
  @Insert(onConflict = OnConflictStrategy.IGNORE)
  fun(user: User) : Long
  
  @Update 
  @Delete   
  
  @Transaction
  fun upsert(user: User) {
        long id = insert(obj);
        if (id == -1) {
            update(obj);
        }
  }
}

Database 
@Database(entities = {User.class}, version = 1)
public abstract class CompanyDatabase extends RoomDatabase{
  public EmployeeDao getInstance(Context context){
    return Room.databaseBuilder(applicationContext, CompanyDatabase.class)
           .fallbackDestructiveMigrations()
                      OR
           .addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_1_4)
           .build();
  }
  
  
  public abstract EmployeeDao employeeDao()
}

new Migration(1, 2) {
    @Override
    public void migrate(SupportSQLiteDatabase database) {
        // Since we didn't alter the table, 
        // there's nothing else to do here.
    }
};
  
  
SignalR Android
========================================================
= new HubConnection("YOUR CONNECTION NAME")
mHubConnection.createHubProxy(SERVER_HUB_CHAT)
mHubConnection.start(clientTransport)

// Receiver methods at client side 
mHubProxy.on("clientBroadcast_android", new SubscriptionHandler1<CustomMessage>{

});

// Calling methods on server 
mHubProxy.invoke("hello_server_method", message);


