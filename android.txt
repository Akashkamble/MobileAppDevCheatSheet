Activity Lifecycle 
========================================================
onCreate	: called when activity is first created.
onStart		: called when activity is becoming visible to the user.
onResume	: called when activity will start interacting with the user.
onPause		: called when activity is not visible to the user.
onStop		: called when activity is no longer visible to the user.
onRestart	: called after your activity is stopped, prior to start.
onDestroy	: called before the activity is destroyed.

Activity & Task Manifest
========================================================
activities are not loaded in vaccum, it is rather loaded in a unit called as task. Task maintains stack of activities
and follows first in last out.

onConfigChanges : 
If you don't want new activities to be created, you can define onConfigChanges and then the orientation, so 
onConfigurationChange{} method will be called in Activity in case of such event.

standard(default) : creates new activity every time, irrespective of anything 
singleTop : 
makes sure the top is never duplicated, 
example current stack -> A, B, C, D  
1) load D again > it wont load a new one, but exisiting onNewIntent is called. 
2) load B again > new stack will be A, B, C, D, B 
singleTask : 
creates a new task for activity if it doesnt exists. But will use the same if it already there. All new activity are loaded in the same task 
single instance : 
a single task holding the only activity is loaded. Rest all behaviour is similar to singleTask 
Intent flags 
FLAG_ACTIVITY_CLEAR_TOP -> clears top activity and calls onNewIntent for exisiting activtiy.

Handling affinities (taskAffinity)
========================================================
The affinity indicates which task an activity prefers to belong to. 
By default, all the activities from the same app have an affinity for each other. 
So, by default, all activities in the same app prefer to be in the same task. 

Activity Release 
========================================================
onSaveInstanceState
For example, if activity B is launched in front of activity A, 
and at some point activity A is killed to reclaim resources, 
activity A will have a chance to save the current state of its user interface via this method so that when the user returns to activity A, 
the state of the user interface can be restored via onCreate(Bundle) or onRestoreInstanceState(Bundle)

Keeping Activity - Config Changes 
========================================================
Activity.onConfigurationChanged() 
can be used as callback when the specified config in the manifest occurs 
configChange="orientation"

New activity is not created but rather onConfigurationChange is called and there the developer can 
call setContentView( layout ) if he/she wants to keep the activity and just rotate the view.

Passing data back from B -> A 
========================================================
setResult( Activity.RESULT_OK, new Intent().putExtra() );
finish();

Dangerous Permission
========================================================
Camera, GPS, Audio, Contacts, Storage, Read SMS

Safe Permission
========================================================
Internet, WIFI, Bluetooth, etc 

Runtime Permission 
========================================================
// API 23
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)
	requestPermissions(perms, permsRequestCode);

onRequestPermissionsResult(int permsRequestCode, String[] permissions, int[] grantResults){

}

// Show explanation 
ActivityCompat.shouldShowRequestPermissionRationale()

Fragment Lifecycle
========================================================
onAttach		: called when fragment has been attached to an activity
onCreateView		: called when itâ€™s time for the fragment to draw its UI
onViewCreated 		: called after the UI is ready and we need to configure resulting views
onActivityCreated	: called after Activity onCreate is completed its execution
onStart 		: called when fragment is visible to user
onPause			: called to indicate user is leaving the fragment
onStop			: called when no longer visible to user 
onDestroyView		: called when its time for fragment to destory the UI 
onDestroy		: called to indicate final cleanup from the fragment is released 
onDetach		: called when fragment is disassociated from its hosting activity

Fragment
========================================================
To call fragments 
with UI : findFragmentById()
without UI : findFragmentByTag()

Fragment 
1. ChildFragment
2. Navigations 

Fragment Transaction 
========================================================
addToBackStack	: just remembers the transaction 
replace		: replaces existing fragment 				// All fragments are not alive
add		: adds a fragment (are added to the same container)	// All fragments are alive 

Activity-Start 	: onCreate, onStart, onResume
Activity-Stop 	: onPause, onStop, onDestroy

Fragment-Start	: onAttach, onCreate, onCreateView, onActivityCreated, onStart, onResume
Fragment-Stop 	: onPause, onStop, onDestroyView, onDestroy, onDetach

Fragment Transaction Cases 
========================================================

** Add & remove

Activity-Start
add 			Fragment A 		: A Fragment-Start		: A is visible 
add 			Fragment B 		: B Fragment-Start 		: B is visible 
add 			Fragment C 		: C Fragment-Start		: C is visible 
remove 			Fragment C		: C Fragment-Stop		: B is visible 

Back button pressed				: Activity Finishes

** Add & replace

Activity-Start
add 			Fragment A 		: A Fragment-Start		: A is visible 
add 			Fragment B 		: B Fragment-Start 		: B is visible 
replace			Fragment C 		: [B->A] Fragment-Stop 
						: C Fragment-Start		: C is visible

Back button pressed 				: Activity Finishes

** Add & remove (using backstack)

Activity-Start
add + addToBackStack	Fragment A 		: A Fragment-Start		: A is visible 
add + addToBackStack	Fragment B 		: B Fragment-Start 		: B is visible 
add + addToBackStack	Fragment C 		: C Fragment-Start		: C is visible 
remove + addToBackStack	Fragment C		: C Fragment-Stop		: B is visible 

Back button pressed 				: B Fragment-Stop		: C is Visible 
Back button pressed 				: C Fragment-Stop		: B is Visible 
Back button pressed 				: B Fragment-Stop		: A is Visible 
Back button pressed 				: A Fragment-Stop		: Nothing visible 
Back button pressed 				: Activity Finishes

** Add, replace & remove (using backstack)

Activity-Start
add + addToBackStack	Fragment A 		: A Fragment-Start		: A is visible 
add + addToBackStack	Fragment B 		: B Fragment-Start 		: B is visible 
replace +addToBackStack Fragment C		: [B->A] Fragment-Stop		 
						: C Fragment-Start		: C is visible
remove + addToBackStack Fragment C		: C Fragment-Stop		: ACTIVITY visible

Back button pressed 				: C Fragment-Start		: C is Visible 
Back button pressed 				: C Fragment-Stop		
						: [A->B] Fragment-Stop		: B is Visible 
Back button pressed 				: B Fragment-Stop		: A is Visible 
Back button pressed 				: A Fragment-Stop		: Nothing visible 
Back button pressed 				: Activity Finishes

** Add & remove (using backstack OPTIONALY)

Activity-Start
add + addToBackStack	Fragment A 		: A Fragment-Start		: A is visible 
add (without backstack)	Fragment B 		: B Fragment-Start 		: B is visible 
add (without backstack) Fragment C 		: C Fragment-Start		: C is visible 
remove (without)	Fragment C		: C Fragment-Stop		: B is visible

Back button pressed 				: [B->A] Fragment-Stop		: Activity visible 
Back button pressed 				: Activity Finishes

** Add, replace & remove (using backstack OPTIONALY)

Activity-Start
add + addToBackStack 	Fragment A		: A Fragment-Start		: A is visible 
add (without backstack)	Fragment B 		: B Fragment-Start 		: B is visible 
replace +addToBackStack Fragment C		: [B->A] Fragment-Stop	
						: C Fragment-Start		: C is visible
remove + addToBackStack	Fragment C		: C Fragment-Stop		: Activity visible 

Back button pressed 				: C Fragment-Start		: C is visible
Back button pressed 				: C Fragment-Stop		
						: // nothing to do for B since it was not in stack 
						: A Fragment-Start		: A is visible
Back button pressed 				: A Fragment-Stop		: Activity visible 
Back button pressed 				: Activity Finishes						

Pop back stack 
========================================================
if (manager.popBackStackImmediate( fragmentName )){
  // Cleared the stack
}else{
  // It was not there in the stack, so create the fragment
}

Fragment Communication
========================================================
getSupportFragmentManager().findFragmentById() (.callAnythingFromActivity)

OR

interface NotifyFragment{
  void refresh(){}
}

Activity {
  NotifyFragment listener;
}

FragmentA implements NotifyFragment{
  refresh(){
  
  }

  onAttach(){ activity.listener = this }	
  onDetach(){ activity.listener = null }	
}

FragmentB {
  onViewCreated(){
     activity.listener?.refresh()
  }	
}

View Pager 
========================================================
Fragment visibility check 
@Override
setUserVisibleHint(){}

layout.xml 
------------
CoordinatorLayout 
	AppBarLayout 
		Toolbar
			TabLayout
	ViewPager 
				
code 
tabLayout.setupWithViewPager(viewPager(this is view and not adapter))		
note: use nestedscrollview with cordinator layout for that scrolling effect.

FileProvider 
========================================================
path & providers -> external path ; getUriFromFile ; only used to pass the URI in intent output of the camera 

ConstrainLayout - Guidelines, Barriers, Chains and Groups
========================================================
Ref: https://riggaroo.co.za/constraintlayout-guidelines-barriers-chains-groups/
Groups: contain references to view ids and can be used to hide or show views 
Guidelines: are fixed 
Barriers: are flexible and can be attached to view 
Chains Types: 
spread			(---1---1---1---)
spread-inside		(1------1------1) 
packed			(------111------) 
// similar to		
// weight system of 
// linearlayout 
weighted		( 1[    1    ]1 )


Retrofit v2 
========================================================
http methods : 
@Path 		- dynamic urls or @GET Call<String> query(@Url String fileUrl);  
@Headers 	- add headers
GET			- Query; QueryMap
POST		- Field; FieldMap  
Multipart 	- @Part array: Array<MultipartBody.Part> 
			  RequestBody.create(MediaType, imageFile); 
			  MultipartBody.Builder.( addFormDataPart(key, RequestBody.create) x MultipleTimes )			  
			  
Download Files 
@Streaming for large files 
@GET Call<ResponseBody> download(@Url String fileUrl);
responseBody.body() -> is a IOStream -> save file you normally do 

SSL Pinning 
certificate pinner -> add(domain, "sha256/dhjfhdjf)

ssl concept : sslSocketFactory, trustmanager, CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
interceptor : http interceptor 
converters  : gson.converter, scalar converter

example of custom interceptor 
class HeaderInterceptor : Interceptor{
   fun intercept(chain: Interceptor.Chain) = chain.request().addHeader("Accept", "application/json").proceed()
}

Live Data 
========================================================
Generally, LiveData delivers updates only when data changes, and only to active observers. 
An exception to this behavior is that observers also receive an update when they change from an inactive to an active state. 
Furthermore, if the observer changes from inactive to active a second time, 
it only receives an update if the value has changed since the last time it became active.

lifecycleOwner are refresh when create, pause, resume stop destroy are called !

with Event Wrapper : content handled 
https://medium.com/@star_zero/singleliveevent-livedata-with-multi-observers-384e17c60a16

with Multiple Observers for SingleLiveEvent : extends MutableLiveData
https://medium.com/@star_zero/singleliveevent-livedata-with-multi-observers-384e17c60a16

Transformations.map => similar to RxJava map 
custom transformations can be implemented using MediatorLiveData 

setValue = call from MainThread ; postValue = call from Worker Thread

ViewModel Init
========================================================
ViewModelProviders.of(context).get(MyViewModel::class.java)

// custom factory 
val viewmodelFactory = MyViewModelFactory(applicationContext)
ViewModelProviders.of(context, viewmodelfactory).get(MyViewModel::class.java)

Fragments to ViewModel Communication
( Pushing events like toast message, etc from VM to Fragment )
========================================================
ViewModel{
	val commandDelegate: NotifyEventLiveData<DataPojo> (MutableLiveData)
	fun postEvent(event: DataPojo){
		commandDelegate.setValue( event )
	}
}

Fragment{
	onViewCreated(){
		commandDelegate.observe{
			when(event.type){
				// show toast, dismiss do anything that you want
			}
		}
	}
}

Activity to Fragment Communication 
========================================================
But in most cases you don't need this because livedata generally updates everything, when changed in DB.

Activity{
	val activityBroadcast: NotifyFragmentsLiveData<DataPojo> (MutableLiveData)
	fun getObserver() = activityBroadcast
}

Fragment1, Fragment2, Fragment3{
	onActivityCreated{
		getObserver().observe{ }
	}
	
	onViewCreated{
		getObserver().setValue{ DataPojo }
	}
}

Fragment Good Pratices 
========================================================
viewModel.livedata.observe( , new callback())
viewlifecycle.Owner 	=> correct way 
this 			=> wrong way 

since the viewmodel persists, new instance is passed when fragment detachs and reattaches because onCreateView is called again.

Work Manager 
========================================================
Service, Job Scheduler and others are been deprecated.
doze mode -> If a user leaves a device unplugged and stationary for a period of time, with the screen off, the device enters Doze mode. In Doze mode, the system attempts to conserve battery by restricting apps' access to network and CPU-intensive services. It also prevents apps from accessing the network and defers their jobs, syncs, and standard alarms. 

when the system is in doze off mode, it is back for brief amount of time also called as maintainence window.

Request Type -> OneTime & Periodic Request 
Type -> Worker(Simplest and recomended ), Coroutine Worker(for kotlin users), RxWorker(for rxjava2), (base/object class)Listenable Worker 
PeriodicWorkRequest cannot be chained.

Periodic request has to be >= 15 mins 

// Check for uniqueness previously using requestID 
WorkManager.enqueueUniqueWork(String, ExistingWorkPolicy, OneTimeWorkRequest) OR
WorkManager.enqueueUniquePeriodicWork(String, ExistingPeriodicWorkPolicy, PeriodicWorkRequest) 

2nd argument => resolution policy of what should be done incase of an unfinished chain of work with that unique name

// For Progress or Broadcast Manager 
setProgressAsync(new Data.Builder().putInt(PROGRESS, 0).build());
WorkManager.getInstance()..getWorkInfoByIdLiveData(requestId).observe(this, onUpdateChanged(){
	Data progress = workInfo.getProgress()
	int value = progress 
})

Handler 
========================================================
= new Handler(Looper.getMainLooper()) { 
   public void handleMessage(Message msg) { 
        // process incoming messages here
       // this will run in non-ui/background thread
   } 
}; 

// Usage 
handler.message(data)
handler.postMessage(data)

Firebase Push Notifications 
========================================================
- Payload size 4KB 
- When application is in foreground you have to override on message received
- When application is in background, it calls default notification and on click opens the launcher activity

remove notification json object and send data in "data" jsonobject from the push json to deliver the message even when the app is killed.

Ran some steps : 
1. Internet permissions are merged in manifest by firebase messaging, so even if the app doesnt hold a internet permission.

Android Q / 10 - API 29
========================================================
Privacy Changes 
https://developer.android.com/about/versions/10/privacy
No hardware details or IMEI number.

========================================================
Each of the options for preserving UI state vary along the following dimensions that impact the user experience:
						ViewModel 		Saved instance state 	Persistent storage
Storage location 				in memory 		serialized to disk 	on disk or network
Survives 
configuration change 				Yes 			Yes 			Yes
Survives system-initiated 
process death 					No 			Yes 			Yes
Survives user complete 
activity dismissal/onFinish() 			No 			No 			Yes
Data limitations 			complex objects are fine,	only for primitive	only limited by disk space
					but space is limited by		types and simple,	or cost / time of retrieval
					available memory.		small objects		from the network resource.
									such as String
  	  
Read/write time 			quick (memory access only) 	slow 			slow (requires disk access
									(requires		or network transaction)
									serialization
									& deserialization
									and disk access) 	 
MVVM 									
========================================================									
MVVM Plain [can only be implemented using]
	- Data Binding 
	- RxJava 
	- LiveData 
	
MVVM uses observer pattern 
Activity  ViewModel  Repository ( Local/Remote/Shared ) 
	
MVVM with Data Binding	
========================================================
Activity 
    	// Referenced xml name
	@BindingAdapter({"toastMessage"})
	public static void thisWillRun(View view, String message)

VM 
	@Bindable 
	String toastMessage
		get 
		set {
			notifyPropertyChanged(BR.toastMessage)
		}
 
layout 
	// Two way binding @={variable}
	// whenever viewmodel toastMessage variable changes, referenced method from activity is called 
	bind:toastMessage="=@{viewModel.toastMessage}"	
	
SOLID Principles 
========================================================
Single Reponsibility 
	Ex: class Task{ downloadFile(), parseFile() }
	    Right way to break class to serve single principle 
	    class Downloader{ downloadFile()  }
	    class Parser { parseFile() }

Repository Pattern 
	Ex: class NewsDao{ getById(), getAll(), getByCategory(), getNewerThan() }
	    instead create a query method which accepts the specifications (byId, all, bycategory, newerthan)
	    class NewsDao{ List<T> query(Specifications) }
	    
Clean Architecture 
========================================================
3 Layers
Data(Repository Pattern)  Domain(Single Responsibility) Presentation(Presenter)

usecases stays in domain layer, and data and presenter they both use mapper, to be totally isolated.
1. Data.source { FirebaseDatabaseHelper { getAllNews(): NewsFeed } }
2. Domain.usecase { GetNewsfeedUsecase { define execute(): new GetNewsfeedUsecase.ResponseValues(response obj from Step 1) }}
3. Presenter.ListActivityPresenter { showList(){ view().showList( usecase.execute() ) } }

Domain has the main Pojo and uses mapper to move objects between layers 

VIPER Architecture 
========================================================
View (activity)
Interactor (usecase)
Presenter (logic)
Entity (data)
Routing (business flow)

Recylerview Patterns
========================================================
LinearLayoutManager(this)
layoutManager.orientation = LinearLayoutManager.HORIZONTAL || LinearLayoutManager.VERTICAL 

GridLayoutManager(this, 2)

StaggeredLayoutManager(this, StaggeredGridLayoutManager.VERTICAL)

Pull to refresh 
========================================================
android.support.v4.widget.SwipeRefreshLayout{
  ListView()
}

mySwipeRefreshLayout.setOnRefreshListener{
  onRefresh(){
    mySwipeRefreshLayout.setRefreshing(true);
  }
}

Firebase 
========================================================
Authentication 
- Create Project and then select Sign-in Providers as Email/Password
- Use methods 
    firebase.createUserWithEmailAndPassword(username, password, complete listener)
	firebase.signInWithEmailAndPassword(username, password, complete listener)
Database 
- Create Project and then select firebase database create your json structure 
	{ "user" : {  } }
- Use methods
	- db = FirebaseDatabase.getInstance().getReference("database-name")
	- db.child("user").setValue() // create, update 
	- db.child("user").addValueEventListener( valueEventListener ) // get 
	- db.child("user").setValue(null) // delete data
	
	
RxJava2
========================================================
Observable - Speaker
Operators  - Translator
Observer   - Listener

Types 
1. Observable  
	.create ObservableOnSubscribe { emitter.onNext emitter.onComplete emitter.onError }
	.subscribe{ Observer { onNext onError onComplete } }
2. Flowable    
	same as above, just needs a BackpressureStrategy 
3. Single
	.create SingleObserverSubscribe { emitter.onSuccess emitter.onComplete }
	.subscribe{ SingleObserver { onSuccess onComplete } }
4. Maybe
	.create same as above (step 3)
	.subscribe{ MaybeObserver { onSuccess onError onComplete } }
5. Completable
	.subscribe{ CompletableObserver { onComplete onError } }
	
Types of Schedulers
1. computation 
for computation work 

2. io 
for io work 

3. newThread
new thread is created 

4. trampoline 
work is managed in queue manner. FIFO 

	
Operators 
1. Filter   		-> filters out stuff at defined 
2. Debounce 		-> shoots at specified interval 
3. DistinctUntilChanged -> just compares with the last emitted value 
4. Zip - 	 	-> Parallel execution
5. FlatMap	 	-> maps to new observable and runs independently 
	input -> ( a,b,c,d,e,f ).flatMap{ ( emittedItem + "x" ).delay(1 sec) }
	output-> [cx, ex, fx, bx, dx, ax]

6. SwitchMap -> unsubscribes to previous observable
	input -> ( a,b,c,d,e,f ).flatMap{ ( emittedItem + "x" ).delay(1 sec) }
	output-> [fx]
		
7. ConcatMap -> same as FlatMap but preserves order		
    output-> [ax, bx, cx, dx, ex, fx]

8. ThrottleLast( time-window: 1 sec ) 
	input -> ( a,b,c,d,e,f )
	output-> [----b----e---]
	
9. Concat   -> concats two observable sequentially 
	input -> ( ().delay( 1 sec ) , ().delay( 1 sec ) )
	output-> ( 2 sec )
	
MLKit 
========================================================
face detection types 
	landmarks : eyes, ears, nose, cheeks, mouth, etc 
	contours  : facial features eyebrows 
	classifications : smiling and eyes open

trained ml file 
	mobilenet_v1_1.0_224_quant.tflite

Basic steps : 
    1. FirebaseVisionFaceDetectorOptions to define the options such as accuracy, etc 
	2. Create FirebaseVisionImage from bitmap
	3. FirebaseVisionFaceDetector.getVisionDetector(options).detectInImage( step 2 ).successListener( FirebaseVisionFace )
	4. face.getHeadEulerAngleY(), face.getBoundingBox()
	
	Camera 
	1. attach Camera.PreviewCallback to Camera.
	2. onPreviewFrame is called at every frame 
	
	RxJava 
	1. PublishSubject<FrameData> 
	2. PublishSubject.create()
		.toFlowable(BackpressureStrategy.DROP)
		.throttleLast(SHOTS_DELAY, TimeUnit.SECONDS)
		.switchMap 
		.filter 
		.observeOn(AndroidSchedulers.mainThread())
        .subscribeOn(Schedulers.io())
		.doOnComplete
		.doOnNext
		.doOnError
		.subscribe
		
	3. Composite Disposable 	
		
Implementation : for realness we had blink test 
Caching -> Observable.concat(memory, disk, network).firstElement

ARCore
========================================================
Programming steps : 
	1. extends ARfragment 
	2. getSceneView().getScene().addOnUpdateListener(this)
	3. onUpdate() - callbacks
	4. Collection<AugmentedImage> list = frame.getUpdatedTrackables(AugmentedImage.class)
	5. Match the augmented images with name()
	
Challenges 
	1. ViewRenderable vs [ Shape > Material > Texture > rangoli.png ]
	
IBM MobileFirst 
========================================================
Project on Console 
	1. Create a android native application on IBM MobileFirst Console and download wlclient.properties files.

Android
	1. Add wlclient.properties in assets - has server information : protocol , address , port number, context 
	2. Connect IBM MobileFirst WLClient.createInstance(ActivityLogin.this).connect(listener{ onSuccess onFailure })
	3. queryParams = Queryparams('url', 'json.toString')
	4. WLResourceRequest(adapterPath, POST).setQueryParameter("params", queryParams).send(listener{ onSuccess onFailure })
	
Mockito, Espresso
========================================================
repository = mock(Repository.class)
when(repository.getMessage).thenReturn("String")
verify(repository, atleastOnce()).getMessage()

AndroidX test core, Espresso 
ActivityScenario.launch(TasksActivity::class.java)
onView(withId(R.id.save_task_fab)).perform(click())
onView(withId(R.id.add_task_description_edit_text)).perform(replaceText("NEW DESCRIPTION"))
onView(withId(R.id.task_detail_description_text)).check(matches(withText("DESCRIPTION")))


