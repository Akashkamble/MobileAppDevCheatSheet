Kotlin co-rountines
========================================================
Dispatchers: 
IO      : network and disk related work 
Default : cpu intensive work
Main    : ui thread

Suspend function: 
Any function declared with "suspend" can be started, paused and resumed. 
This function can only be called by another suspend function.

Kotlin corountines calling functions: 
launch(): Job          // join ()
async() : Deferred<T>  // await() behaves similar to Future of java, which can be 

launch vs async
--------------------------------------------------------
launch  : should be used when the result doesnt matter only execution is important
          any exception occuring inside the launch function is treated as uncaught exception and it crashes the application,
          compulsorily needs a handler to avoid this crash scenario.
          if child crashes it cancels the parent
          join is used to wait for completion 
         
async   : should be used when the result is important
          any exception thrown in the execution is stored in the result object and can be ignored or handled as per logic
          await() is used to wait for the result 
         
         
Usage         
--------------------------------------------------------
1. 
val launchScope = GlobalScope.launch(Dispatchers.IO){ // your code  }

2.
val asyncScope  = GlobalScope.async(Dispatchers.IO){ // your code  }
asyncScope.await()

---
OR 
---

// dont have to call await, it is called by default. Also this method is a suspend function 
val asyncScope  = withContext(Dispatchers.IO){ // your code }

3. 
class MainActivity : AppCompatActivity(), CoroutineScope{

  // On which do you wish to run i.e Dispatcher + job 
  override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job

  private lateinit var job: Job
  
  onCreate()  { job = Job()  }
  onDestroy() { job.cancel() }
  
  fun someMethod(){
    // can be used directly in this scope 
    launch{
      // code 
    }
    async{
      // code 
    }
  }  
}

launch and async require no start method call
calling await() on async will hold the current execution for result
calling join() will hold the current execution until launch scope finishes execution 

Cancelling Jobs
--------------------------------------------------------

Case 1 when using (1)-CoroutineScope & when using (2)-viewModelScope

job.cancelChildren() vs job.cancel()

use 
[job.cancel()]                                              for (1)
[viewModelScope.coroutineContext.cancel()]                  for (2)

only if you want to end the jobs permanently, you will then have to create job object using job = Job() 
to start a new job scope else all future launch/async won't run. 

use 
[job.cancelChildren()]                                      for (1)
[viewModelScope.coroutineContext.cancelChildren()]          for (2)
if you want to cancel all current jobs, but keep the future launch/async alive. 


Exception Handling
--------------------------------------------------------

Case 1: 

onCreate(){
  // Crashes the application, since all exceptions are uncaught
  GlobalScope.launch(Dispatchers.IO) { unpredictable() }
  
  // Doesn't crash the application
  GlobalScope.async(Dispatchers.IO)  { unpredictable() }    
}

Case 2: (using coroutine scope) // handling the above scenario 

// Exception Handler 
private  val handler = CoroutineExceptionHandler { _, exception -> println("Hello Caught $exception") }

// Adding the handler to the context 
override val coroutineContext: CoroutineContext
        get() = Dispatchers.Main + job + handler

onCreate(){
    // doesn't crash 
    // coz uncaught exception is handled by the exception handler passed in the coroutineContext
    launch{
        unpredictable()  
    }
}

fun unpredictable() = throw RuntimeException("It is unfortunate that you are reading this message")

Note: But after the exception has been handled it changes the state of the job to completed 
after which it longer executes any more execution from launch and async. 




